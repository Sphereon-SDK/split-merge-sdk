/* 
 * Split Merger
 *
 * The Split and Merge API allows you to split and merge files. For now you always have to define the filetype for the split or merge result. Supported types are Tiff, PDF or MS word files. In the future new types as well as type inferring will be implemented. Please note that this API will change in the way the merge or split is initiated from v0.1 to v0.2 which is scheduled later in 2017.
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Sphereon.SDK.SplitMerge.Client;
using Sphereon.SDK.SplitMerge.Api;
using Sphereon.SDK.SplitMerge.Model;

namespace Sphereon.SDK.SplitMerge.Test
{
    /// <summary>
    ///  Class for testing AllApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AllApiTests
    {
        private AllApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AllApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AllApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AllApi
            //Assert.IsInstanceOfType(typeof(AllApi), instance, "instance is a AllApi");
        }

        
        /// <summary>
        /// Test CreateJob
        /// </summary>
        [Test]
        public void CreateJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobSettings jobSettings = null;
            //var response = instance.CreateJob(jobSettings);
            //Assert.IsInstanceOf<Job> (response, "response is Job");
        }
        
        /// <summary>
        /// Test DeleteJob
        /// </summary>
        [Test]
        public void DeleteJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //var response = instance.DeleteJob(jobid);
            //Assert.IsInstanceOf<Job> (response, "response is Job");
        }
        
        /// <summary>
        /// Test GetJob
        /// </summary>
        [Test]
        public void GetJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //var response = instance.GetJob(jobid);
            //Assert.IsInstanceOf<Job> (response, "response is Job");
        }
        
        /// <summary>
        /// Test GetStream
        /// </summary>
        [Test]
        public void GetStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //var response = instance.GetStream(jobid);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test SubmitMergeJob
        /// </summary>
        [Test]
        public void SubmitMergeJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //MergeSettings settings = null;
            //var response = instance.SubmitMergeJob(jobid, settings);
            //Assert.IsInstanceOf<Job> (response, "response is Job");
        }
        
        /// <summary>
        /// Test SubmitSplitJob
        /// </summary>
        [Test]
        public void SubmitSplitJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //SplitSettings settings = null;
            //var response = instance.SubmitSplitJob(jobid, settings);
            //Assert.IsInstanceOf<Job> (response, "response is Job");
        }
        
        /// <summary>
        /// Test UploadFile
        /// </summary>
        [Test]
        public void UploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //System.IO.Stream stream = null;
            //var response = instance.UploadFile(jobid, stream);
            //Assert.IsInstanceOf<Job> (response, "response is Job");
        }
        
    }

}

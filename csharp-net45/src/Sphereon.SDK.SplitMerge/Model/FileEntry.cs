/* 
 * Split Merger
 *
 * The Split and Merge API allows you to split and merge files. For now you always have to define the filetype for the split or merge result. Supported types are Tiff, PDF or MS word files. In the future new types as well as type inferring will be implemented. Please note that this API will change in the way the merge or split is initiated from v0.1 to v0.2 which is scheduled later in 2017.
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.SplitMerge.Model
{
    /// <summary>
    /// FileEntry
    /// </summary>
    [DataContract]
    public partial class FileEntry :  IEquatable<FileEntry>
    {
        /// <summary>
        /// file format of file
        /// </summary>
        /// <value>file format of file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FileFormatEnum
        {
            
            /// <summary>
            /// Enum TIFF for "TIFF"
            /// </summary>
            [EnumMember(Value = "TIFF")]
            TIFF,
            
            /// <summary>
            /// Enum PDF for "PDF"
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF,
            
            /// <summary>
            /// Enum DOCX for "DOCX"
            /// </summary>
            [EnumMember(Value = "DOCX")]
            DOCX,
            
            /// <summary>
            /// Enum DOC for "DOC"
            /// </summary>
            [EnumMember(Value = "DOC")]
            DOC
        }

        /// <summary>
        /// file format of file
        /// </summary>
        /// <value>file format of file</value>
        [DataMember(Name="fileFormat", EmitDefaultValue=false)]
        public FileFormatEnum? FileFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileEntry" /> class.
        /// </summary>
        /// <param name="Filename">name of file that is uploaded for a job (required).</param>
        /// <param name="FileFormat">file format of file (required).</param>
        /// <param name="FileId">an identifier for the file that is used for file storage (required).</param>
        public FileEntry(string Filename = null, FileFormatEnum? FileFormat = null, string FileId = null)
        {
            // to ensure "Filename" is required (not null)
            if (Filename == null)
            {
                throw new InvalidDataException("Filename is a required property for FileEntry and cannot be null");
            }
            else
            {
                this.Filename = Filename;
            }
            // to ensure "FileFormat" is required (not null)
            if (FileFormat == null)
            {
                throw new InvalidDataException("FileFormat is a required property for FileEntry and cannot be null");
            }
            else
            {
                this.FileFormat = FileFormat;
            }
            // to ensure "FileId" is required (not null)
            if (FileId == null)
            {
                throw new InvalidDataException("FileId is a required property for FileEntry and cannot be null");
            }
            else
            {
                this.FileId = FileId;
            }
        }
        
        /// <summary>
        /// name of file that is uploaded for a job
        /// </summary>
        /// <value>name of file that is uploaded for a job</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }
        /// <summary>
        /// an identifier for the file that is used for file storage
        /// </summary>
        /// <value>an identifier for the file that is used for file storage</value>
        [DataMember(Name="fileId", EmitDefaultValue=false)]
        public string FileId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileEntry {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FileEntry);
        }

        /// <summary>
        /// Returns true if FileEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of FileEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileEntry other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Filename == other.Filename ||
                    this.Filename != null &&
                    this.Filename.Equals(other.Filename)
                ) && 
                (
                    this.FileFormat == other.FileFormat ||
                    this.FileFormat != null &&
                    this.FileFormat.Equals(other.FileFormat)
                ) && 
                (
                    this.FileId == other.FileId ||
                    this.FileId != null &&
                    this.FileId.Equals(other.FileId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Filename != null)
                    hash = hash * 59 + this.Filename.GetHashCode();
                if (this.FileFormat != null)
                    hash = hash * 59 + this.FileFormat.GetHashCode();
                if (this.FileId != null)
                    hash = hash * 59 + this.FileId.GetHashCode();
                return hash;
            }
        }
    }

}

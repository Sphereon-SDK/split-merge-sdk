/* 
 * Split Merger
 *
 * The Split and Merge API allows you to split and merge files. For now you always have to define the filetype for the split or merge result. Supported types are Tiff, PDF or MS word files. In the future new types as well as type inferring will be implemented. Please note that this API will change in the way the merge or split is initiated from v0.1 to v0.2 which is scheduled later in 2017.
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.SplitMerge.Client;
using Sphereon.SDK.SplitMerge.Model;

namespace Sphereon.SDK.SplitMerge.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAllApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new job
        /// </summary>
        /// <remarks>
        /// Create a new job for a splitting or merging operation
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSettings">jobSettings</param>
        /// <returns>Job</returns>
        Job CreateJob (JobSettings jobSettings);

        /// <summary>
        /// Create a new job
        /// </summary>
        /// <remarks>
        /// Create a new job for a splitting or merging operation
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSettings">jobSettings</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> CreateJobWithHttpInfo (JobSettings jobSettings);
        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete a job manually with all its stored objects
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Job</returns>
        Job DeleteJob (string jobid);

        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete a job manually with all its stored objects
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> DeleteJobWithHttpInfo (string jobid);
        /// <summary>
        /// Get a job
        /// </summary>
        /// <remarks>
        /// Get a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Job</returns>
        Job GetJob (string jobid);

        /// <summary>
        /// Get a job
        /// </summary>
        /// <remarks>
        /// Get a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> GetJobWithHttpInfo (string jobid);
        /// <summary>
        /// Get the current result stream
        /// </summary>
        /// <remarks>
        /// Get the result as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the result when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>byte[]</returns>
        byte[] GetStream (string jobid);

        /// <summary>
        /// Get the current result stream
        /// </summary>
        /// <remarks>
        /// Get the result as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the result when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetStreamWithHttpInfo (string jobid);
        /// <summary>
        /// Start merging of a job
        /// </summary>
        /// <remarks>
        /// Start merging of a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Job</returns>
        Job SubmitMergeJob (string jobid, MergeSettings settings);

        /// <summary>
        /// Start merging of a job
        /// </summary>
        /// <remarks>
        /// Start merging of a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> SubmitMergeJobWithHttpInfo (string jobid, MergeSettings settings);
        /// <summary>
        /// Start splitting of a job
        /// </summary>
        /// <remarks>
        /// Start splitting of a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Job</returns>
        Job SubmitSplitJob (string jobid, SplitSettings settings);

        /// <summary>
        /// Start splitting of a job
        /// </summary>
        /// <remarks>
        /// Start splitting of a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> SubmitSplitJobWithHttpInfo (string jobid, SplitSettings settings);
        /// <summary>
        /// Upload a file for a job
        /// </summary>
        /// <remarks>
        /// Upload a file for a split or merge job. Processing will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a job</param>
        /// <returns>Job</returns>
        Job UploadFile (string jobid, System.IO.Stream stream);

        /// <summary>
        /// Upload a file for a job
        /// </summary>
        /// <remarks>
        /// Upload a file for a split or merge job. Processing will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a job</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> UploadFileWithHttpInfo (string jobid, System.IO.Stream stream);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new job
        /// </summary>
        /// <remarks>
        /// Create a new job for a splitting or merging operation
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSettings">jobSettings</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> CreateJobAsync (JobSettings jobSettings);

        /// <summary>
        /// Create a new job
        /// </summary>
        /// <remarks>
        /// Create a new job for a splitting or merging operation
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSettings">jobSettings</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> CreateJobAsyncWithHttpInfo (JobSettings jobSettings);
        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete a job manually with all its stored objects
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> DeleteJobAsync (string jobid);

        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete a job manually with all its stored objects
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> DeleteJobAsyncWithHttpInfo (string jobid);
        /// <summary>
        /// Get a job
        /// </summary>
        /// <remarks>
        /// Get a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> GetJobAsync (string jobid);

        /// <summary>
        /// Get a job
        /// </summary>
        /// <remarks>
        /// Get a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> GetJobAsyncWithHttpInfo (string jobid);
        /// <summary>
        /// Get the current result stream
        /// </summary>
        /// <remarks>
        /// Get the result as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the result when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetStreamAsync (string jobid);

        /// <summary>
        /// Get the current result stream
        /// </summary>
        /// <remarks>
        /// Get the result as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the result when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetStreamAsyncWithHttpInfo (string jobid);
        /// <summary>
        /// Start merging of a job
        /// </summary>
        /// <remarks>
        /// Start merging of a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> SubmitMergeJobAsync (string jobid, MergeSettings settings);

        /// <summary>
        /// Start merging of a job
        /// </summary>
        /// <remarks>
        /// Start merging of a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> SubmitMergeJobAsyncWithHttpInfo (string jobid, MergeSettings settings);
        /// <summary>
        /// Start splitting of a job
        /// </summary>
        /// <remarks>
        /// Start splitting of a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> SubmitSplitJobAsync (string jobid, SplitSettings settings);

        /// <summary>
        /// Start splitting of a job
        /// </summary>
        /// <remarks>
        /// Start splitting of a job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> SubmitSplitJobAsyncWithHttpInfo (string jobid, SplitSettings settings);
        /// <summary>
        /// Upload a file for a job
        /// </summary>
        /// <remarks>
        /// Upload a file for a split or merge job. Processing will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a job</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> UploadFileAsync (string jobid, System.IO.Stream stream);

        /// <summary>
        /// Upload a file for a job
        /// </summary>
        /// <remarks>
        /// Upload a file for a split or merge job. Processing will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a job</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> UploadFileAsyncWithHttpInfo (string jobid, System.IO.Stream stream);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AllApi : IAllApi
    {
        private Sphereon.SDK.SplitMerge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AllApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AllApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.SplitMerge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AllApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AllApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.SplitMerge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.SplitMerge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new job Create a new job for a splitting or merging operation
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSettings">jobSettings</param>
        /// <returns>Job</returns>
        public Job CreateJob (JobSettings jobSettings)
        {
             ApiResponse<Job> localVarResponse = CreateJobWithHttpInfo(jobSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job Create a new job for a splitting or merging operation
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSettings">jobSettings</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > CreateJobWithHttpInfo (JobSettings jobSettings)
        {
            // verify the required parameter 'jobSettings' is set
            if (jobSettings == null)
                throw new ApiException(400, "Missing required parameter 'jobSettings' when calling AllApi->CreateJob");

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobSettings != null && jobSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(jobSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jobSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Create a new job Create a new job for a splitting or merging operation
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSettings">jobSettings</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> CreateJobAsync (JobSettings jobSettings)
        {
             ApiResponse<Job> localVarResponse = await CreateJobAsyncWithHttpInfo(jobSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job Create a new job for a splitting or merging operation
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobSettings">jobSettings</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> CreateJobAsyncWithHttpInfo (JobSettings jobSettings)
        {
            // verify the required parameter 'jobSettings' is set
            if (jobSettings == null)
                throw new ApiException(400, "Missing required parameter 'jobSettings' when calling AllApi->CreateJob");

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobSettings != null && jobSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(jobSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jobSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Delete a job manually Delete a job manually with all its stored objects
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Job</returns>
        public Job DeleteJob (string jobid)
        {
             ApiResponse<Job> localVarResponse = DeleteJobWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a job manually Delete a job manually with all its stored objects
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > DeleteJobWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->DeleteJob");

            var localVarPath = "/jobs/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Delete a job manually Delete a job manually with all its stored objects
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> DeleteJobAsync (string jobid)
        {
             ApiResponse<Job> localVarResponse = await DeleteJobAsyncWithHttpInfo(jobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a job manually Delete a job manually with all its stored objects
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> DeleteJobAsyncWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->DeleteJob");

            var localVarPath = "/jobs/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Get a job Get a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Job</returns>
        public Job GetJob (string jobid)
        {
             ApiResponse<Job> localVarResponse = GetJobWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a job Get a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > GetJobWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->GetJob");

            var localVarPath = "/jobs/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Get a job Get a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> GetJobAsync (string jobid)
        {
             ApiResponse<Job> localVarResponse = await GetJobAsyncWithHttpInfo(jobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a job Get a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> GetJobAsyncWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->GetJob");

            var localVarPath = "/jobs/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Get the current result stream Get the result as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the result when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>byte[]</returns>
        public byte[] GetStream (string jobid)
        {
             ApiResponse<byte[]> localVarResponse = GetStreamWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current result stream Get the result as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the result when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetStreamWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->GetStream");

            var localVarPath = "/jobs/{jobid}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream", 
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        /// Get the current result stream Get the result as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the result when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetStreamAsync (string jobid)
        {
             ApiResponse<byte[]> localVarResponse = await GetStreamAsyncWithHttpInfo(jobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current result stream Get the result as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the result when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetStreamAsyncWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->GetStream");

            var localVarPath = "/jobs/{jobid}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream", 
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        /// Start merging of a job Start merging of a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Job</returns>
        public Job SubmitMergeJob (string jobid, MergeSettings settings)
        {
             ApiResponse<Job> localVarResponse = SubmitMergeJobWithHttpInfo(jobid, settings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start merging of a job Start merging of a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > SubmitMergeJobWithHttpInfo (string jobid, MergeSettings settings)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->SubmitMergeJob");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling AllApi->SubmitMergeJob");

            var localVarPath = "/jobs/{jobid}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitMergeJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Start merging of a job Start merging of a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> SubmitMergeJobAsync (string jobid, MergeSettings settings)
        {
             ApiResponse<Job> localVarResponse = await SubmitMergeJobAsyncWithHttpInfo(jobid, settings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start merging of a job Start merging of a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> SubmitMergeJobAsyncWithHttpInfo (string jobid, MergeSettings settings)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->SubmitMergeJob");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling AllApi->SubmitMergeJob");

            var localVarPath = "/jobs/{jobid}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitMergeJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Start splitting of a job Start splitting of a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Job</returns>
        public Job SubmitSplitJob (string jobid, SplitSettings settings)
        {
             ApiResponse<Job> localVarResponse = SubmitSplitJobWithHttpInfo(jobid, settings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start splitting of a job Start splitting of a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > SubmitSplitJobWithHttpInfo (string jobid, SplitSettings settings)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->SubmitSplitJob");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling AllApi->SubmitSplitJob");

            var localVarPath = "/jobs/{jobid}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitSplitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Start splitting of a job Start splitting of a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> SubmitSplitJobAsync (string jobid, SplitSettings settings)
        {
             ApiResponse<Job> localVarResponse = await SubmitSplitJobAsyncWithHttpInfo(jobid, settings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start splitting of a job Start splitting of a job
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="settings">settings</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> SubmitSplitJobAsyncWithHttpInfo (string jobid, SplitSettings settings)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->SubmitSplitJob");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling AllApi->SubmitSplitJob");

            var localVarPath = "/jobs/{jobid}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitSplitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Upload a file for a job Upload a file for a split or merge job. Processing will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a job</param>
        /// <returns>Job</returns>
        public Job UploadFile (string jobid, System.IO.Stream stream)
        {
             ApiResponse<Job> localVarResponse = UploadFileWithHttpInfo(jobid, stream);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file for a job Upload a file for a split or merge job. Processing will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a job</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > UploadFileWithHttpInfo (string jobid, System.IO.Stream stream)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->UploadFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling AllApi->UploadFile");

            var localVarPath = "/jobs/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

        /// <summary>
        /// Upload a file for a job Upload a file for a split or merge job. Processing will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a job</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> UploadFileAsync (string jobid, System.IO.Stream stream)
        {
             ApiResponse<Job> localVarResponse = await UploadFileAsyncWithHttpInfo(jobid, stream);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a file for a job Upload a file for a split or merge job. Processing will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.SplitMerge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a job</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> UploadFileAsyncWithHttpInfo (string jobid, System.IO.Stream stream)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling AllApi->UploadFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling AllApi->UploadFile");

            var localVarPath = "/jobs/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
            
        }

    }
}

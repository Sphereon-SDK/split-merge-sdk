/*
 * Split Merger
 * The Split and Merge API allows you to split and merge files. For now you always have to define the filetype for the split or merge result. Supported types are Tiff, PDF or MS word files. In the future new types as well as type inferring will be implemented. Please note that this API will change in the way the merge or split is initiated from v0.1 to v0.2 which is scheduled later in 2017.
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.splitmerge.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * FileEntry
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-12T12:46:53.940+02:00")
public class FileEntry {
  @JsonProperty("filename")
  private String filename = null;

  /**
   * file format of file
   */
  public enum FileFormatEnum {
    TIFF("TIFF"),
    
    PDF("PDF"),
    
    DOCX("DOCX"),
    
    DOC("DOC");

    private String value;

    FileFormatEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FileFormatEnum fromValue(String text) {
      for (FileFormatEnum b : FileFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("fileFormat")
  private FileFormatEnum fileFormat = null;

  @JsonProperty("fileId")
  private String fileId = null;

  public FileEntry filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * name of file that is uploaded for a job
   * @return filename
  **/
  @ApiModelProperty(example = "null", required = true, value = "name of file that is uploaded for a job")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public FileEntry fileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

   /**
   * file format of file
   * @return fileFormat
  **/
  @ApiModelProperty(example = "null", required = true, value = "file format of file")
  public FileFormatEnum getFileFormat() {
    return fileFormat;
  }

  public void setFileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
  }

  public FileEntry fileId(String fileId) {
    this.fileId = fileId;
    return this;
  }

   /**
   * an identifier for the file that is used for file storage
   * @return fileId
  **/
  @ApiModelProperty(example = "null", required = true, value = "an identifier for the file that is used for file storage")
  public String getFileId() {
    return fileId;
  }

  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileEntry fileEntry = (FileEntry) o;
    return Objects.equals(this.filename, fileEntry.filename) &&
        Objects.equals(this.fileFormat, fileEntry.fileFormat) &&
        Objects.equals(this.fileId, fileEntry.fileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filename, fileFormat, fileId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileEntry {\n");
    
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


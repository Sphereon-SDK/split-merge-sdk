/*
 * Split Merger
 * The Split and Merge API allows you to split and merge files. For now you always have to define the filetype for the split or merge result. Supported types are Tiff, PDF or MS word files. In the future new types as well as type inferring will be implemented. Please note that this API will change in the way the merge or split is initiated from v0.1 to v0.2 which is scheduled later in 2017.
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.splitmerge.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.sphereon.sdk.splitmerge.model.BackendSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Job settings
 */
@ApiModel(description = "Job settings")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-12T12:46:53.940+02:00")
public class JobSettings {
  @JsonProperty("backendSettings")
  private BackendSettings backendSettings = null;

  /**
   * The provider of the storage backend
   */
  public enum StorageProviderEnum {
    SUPPLIER("API_SUPPLIER");

    private String value;

    StorageProviderEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StorageProviderEnum fromValue(String text) {
      for (StorageProviderEnum b : StorageProviderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("storageProvider")
  private StorageProviderEnum storageProvider = null;

  /**
   * The quality of the action engine that will be used to process the job
   */
  public enum EngineEnum {
    BASIC("BASIC"),
    
    ADVANCED("ADVANCED"),
    
    PREMIUM("PREMIUM");

    private String value;

    EngineEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EngineEnum fromValue(String text) {
      for (EngineEnum b : EngineEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("engine")
  private EngineEnum engine = null;

  public JobSettings backendSettings(BackendSettings backendSettings) {
    this.backendSettings = backendSettings;
    return this;
  }

   /**
   * Settings of the storage backend
   * @return backendSettings
  **/
  @ApiModelProperty(example = "null", value = "Settings of the storage backend")
  public BackendSettings getBackendSettings() {
    return backendSettings;
  }

  public void setBackendSettings(BackendSettings backendSettings) {
    this.backendSettings = backendSettings;
  }

  public JobSettings storageProvider(StorageProviderEnum storageProvider) {
    this.storageProvider = storageProvider;
    return this;
  }

   /**
   * The provider of the storage backend
   * @return storageProvider
  **/
  @ApiModelProperty(example = "null", required = true, value = "The provider of the storage backend")
  public StorageProviderEnum getStorageProvider() {
    return storageProvider;
  }

  public void setStorageProvider(StorageProviderEnum storageProvider) {
    this.storageProvider = storageProvider;
  }

  public JobSettings engine(EngineEnum engine) {
    this.engine = engine;
    return this;
  }

   /**
   * The quality of the action engine that will be used to process the job
   * @return engine
  **/
  @ApiModelProperty(example = "null", required = true, value = "The quality of the action engine that will be used to process the job")
  public EngineEnum getEngine() {
    return engine;
  }

  public void setEngine(EngineEnum engine) {
    this.engine = engine;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSettings jobSettings = (JobSettings) o;
    return Objects.equals(this.backendSettings, jobSettings.backendSettings) &&
        Objects.equals(this.storageProvider, jobSettings.storageProvider) &&
        Objects.equals(this.engine, jobSettings.engine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendSettings, storageProvider, engine);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSettings {\n");
    
    sb.append("    backendSettings: ").append(toIndentedString(backendSettings)).append("\n");
    sb.append("    storageProvider: ").append(toIndentedString(storageProvider)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


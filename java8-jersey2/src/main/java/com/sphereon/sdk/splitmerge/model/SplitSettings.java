/*
 * Split Merger
 * The Split and Merge API allows you to split and merge files. For now you always have to define the filetype for the split or merge result. Supported types are Tiff, PDF or MS word files. In the future new types as well as type inferring will be implemented. Please note that this API will change in the way the merge or split is initiated from v0.1 to v0.2 which is scheduled later in 2017.
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.splitmerge.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.sphereon.sdk.splitmerge.model.Lifecycle;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * SplitSettings
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-12T12:46:53.940+02:00")
public class SplitSettings {
  @JsonProperty("lifecycle")
  private Lifecycle lifecycle = null;

  /**
   * format which will be returned when the result is requested
   */
  public enum DeliveryFormatEnum {
    FILE("FILE"),
    
    ZIP("ZIP"),
    
    _7ZIP("_7ZIP");

    private String value;

    DeliveryFormatEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DeliveryFormatEnum fromValue(String text) {
      for (DeliveryFormatEnum b : DeliveryFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("deliveryFormat")
  private DeliveryFormatEnum deliveryFormat = null;

  @JsonProperty("splitPages")
  private List<Integer> splitPages = new ArrayList<Integer>();

  /**
   * the format of the output file
   */
  public enum FileFormatEnum {
    TIFF("TIFF"),
    
    PDF("PDF"),
    
    DOCX("DOCX"),
    
    DOC("DOC");

    private String value;

    FileFormatEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FileFormatEnum fromValue(String text) {
      for (FileFormatEnum b : FileFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("fileFormat")
  private FileFormatEnum fileFormat = null;

  public SplitSettings lifecycle(Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

   /**
   * Get lifecycle
   * @return lifecycle
  **/
  @ApiModelProperty(example = "null", value = "")
  public Lifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }

  public SplitSettings deliveryFormat(DeliveryFormatEnum deliveryFormat) {
    this.deliveryFormat = deliveryFormat;
    return this;
  }

   /**
   * format which will be returned when the result is requested
   * @return deliveryFormat
  **/
  @ApiModelProperty(example = "null", required = true, value = "format which will be returned when the result is requested")
  public DeliveryFormatEnum getDeliveryFormat() {
    return deliveryFormat;
  }

  public void setDeliveryFormat(DeliveryFormatEnum deliveryFormat) {
    this.deliveryFormat = deliveryFormat;
  }

  public SplitSettings splitPages(List<Integer> splitPages) {
    this.splitPages = splitPages;
    return this;
  }

  public SplitSettings addSplitPagesItem(Integer splitPagesItem) {
    this.splitPages.add(splitPagesItem);
    return this;
  }

   /**
   * Get splitPages
   * @return splitPages
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<Integer> getSplitPages() {
    return splitPages;
  }

  public void setSplitPages(List<Integer> splitPages) {
    this.splitPages = splitPages;
  }

  public SplitSettings fileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

   /**
   * the format of the output file
   * @return fileFormat
  **/
  @ApiModelProperty(example = "null", required = true, value = "the format of the output file")
  public FileFormatEnum getFileFormat() {
    return fileFormat;
  }

  public void setFileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SplitSettings splitSettings = (SplitSettings) o;
    return Objects.equals(this.lifecycle, splitSettings.lifecycle) &&
        Objects.equals(this.deliveryFormat, splitSettings.deliveryFormat) &&
        Objects.equals(this.splitPages, splitSettings.splitPages) &&
        Objects.equals(this.fileFormat, splitSettings.fileFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lifecycle, deliveryFormat, splitPages, fileFormat);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SplitSettings {\n");
    
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    deliveryFormat: ").append(toIndentedString(deliveryFormat)).append("\n");
    sb.append("    splitPages: ").append(toIndentedString(splitPages)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


/*
 * Split Merger
 * The Split and Merge API allows you to split and merge files. For now you always have to define the filetype for the split or merge result. Supported types are Tiff, PDF or MS word files. In the future new types as well as type inferring will be implemented. Please note that this API will change in the way the merge or split is initiated from v0.1 to v0.2 which is scheduled later in 2017.
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.splitmerge.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * BackendSettings
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-12T12:46:53.940+02:00")
public class BackendSettings {
  @JsonProperty("container")
  private String container = null;

  /**
   * type of the backend where files will be stored
   */
  public enum BackendTypeEnum {
    FILESYSTEM("FILESYSTEM"),
    
    AMAZON_S3("AMAZON_S3"),
    
    MS_AZURE_BLOB_STORAGE("MS_AZURE_BLOB_STORAGE"),
    
    GOOGLE_CLOUD_STORAGE("GOOGLE_CLOUD_STORAGE");

    private String value;

    BackendTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BackendTypeEnum fromValue(String text) {
      for (BackendTypeEnum b : BackendTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("backendType")
  private BackendTypeEnum backendType = null;

  @JsonProperty("backend")
  private String backend = null;

  public BackendSettings container(String container) {
    this.container = container;
    return this;
  }

   /**
   * name of the container where files will be stored
   * @return container
  **/
  @ApiModelProperty(example = "null", required = true, value = "name of the container where files will be stored")
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }

  public BackendSettings backendType(BackendTypeEnum backendType) {
    this.backendType = backendType;
    return this;
  }

   /**
   * type of the backend where files will be stored
   * @return backendType
  **/
  @ApiModelProperty(example = "null", required = true, value = "type of the backend where files will be stored")
  public BackendTypeEnum getBackendType() {
    return backendType;
  }

  public void setBackendType(BackendTypeEnum backendType) {
    this.backendType = backendType;
  }

  public BackendSettings backend(String backend) {
    this.backend = backend;
    return this;
  }

   /**
   * name of the backend where files will be stored
   * @return backend
  **/
  @ApiModelProperty(example = "null", required = true, value = "name of the backend where files will be stored")
  public String getBackend() {
    return backend;
  }

  public void setBackend(String backend) {
    this.backend = backend;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackendSettings backendSettings = (BackendSettings) o;
    return Objects.equals(this.container, backendSettings.container) &&
        Objects.equals(this.backendType, backendSettings.backendType) &&
        Objects.equals(this.backend, backendSettings.backend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, backendType, backend);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackendSettings {\n");
    
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    backendType: ").append(toIndentedString(backendType)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


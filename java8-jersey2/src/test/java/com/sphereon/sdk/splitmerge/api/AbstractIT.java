/*
 * Split Merger
 * The Split and Merge API allows you to split and merge files. For now you always have to define the filetype for the split or merge result. Supported types are Tiff, PDF or MS word files. In the future new types as well as type inferring will be implemented. Please note that this API will change in the way the merge or split is initiated from v0.1 to v0.2 which is scheduled later in 2017.
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.splitmerge.api;

import com.sphereon.sdk.splitmerge.handler.ApiException;
import com.sphereon.sdk.splitmerge.model.Job;
import com.sphereon.sdk.splitmerge.model.JobSettings;
import com.sphereon.sdk.splitmerge.model.MergeSettings;
import org.junit.*;
import org.junit.runners.MethodSorters;

import java.io.File;
import java.net.URL;

public abstract class AbstractIT {

    protected static final AllApi API = new AllApi();
    protected static final JobSettings JOB_SETTINGS = new JobSettings();
    protected static Job job;

    protected static final String INPUT_FILE_NAME = "split-it.docx";// "test.tif";
    protected static final URL INPUT_FILE_URL = AbstractIT.class.getResource("/" + INPUT_FILE_NAME);

    protected static final String ACCESS_TOKEN = "0dbd17f1-c108-350e-807e-42d13e543b32";

    enum Mode {GW, LOCAL}

    protected Mode mode = Mode.LOCAL;

    @Before
    public void init() {
        if (mode == Mode.LOCAL) {
            API.getApiClient().setBasePath("http://localhost:18240");
        } else {
            API.getApiClient().setAccessToken(ACCESS_TOKEN);
        }
    }


    /**
     * Create a new job
     * <p>
     * Create a new job for a splitting or merging operation
     *
     * @throws ApiException if the Api call fails
     */
    protected void createJobTestImpl() throws ApiException {
        JOB_SETTINGS.engine(JobSettings.EngineEnum.PREMIUM);
        JOB_SETTINGS.storageProvider(JobSettings.StorageProviderEnum.SUPPLIER);

        job = API.createJob(JOB_SETTINGS);
        Assert.assertNotNull(job);
        Assert.assertNotNull(job.getJobId());
        Assert.assertNotNull(job.getJobSettings());

        // Known wrong state directly after job creation for 0.1
        Assert.assertEquals(Job.StateEnum.INPUTS_UPLOADED, job.getState());
    }


    /**
     * Upload a file for a job
     * <p>
     * Upload a file for a split or merge job. Processing will not be started yet.
     *
     * @throws ApiException if the Api call fails
     */
    public void uploadFileTestImpl() throws ApiException {
        File stream = new File(INPUT_FILE_URL.getFile());
        Job response = API.uploadFile(job.getJobId(), stream);
        assertJob(response, Job.StateEnum.INPUTS_UPLOADED);
        job = response;
    }

    /**
     * Get a job manually
     * <p>
     * Get a job manually with all its stored objects
     *
     * @throws ApiException if the Api call fails
     */
    public void getJobBeforeTestImpl() throws ApiException {
        Job response = API.getJob(job.getJobId());
        assertJob(response, Job.StateEnum.INPUTS_UPLOADED);
    }


   /* *//**
     * Start splitting of a job
     * <p>
     * Start splitting of a job
     *
     * @throws ApiException if the Api call fails
     *//*
    @Test
    public void _040_submitMergeJobTest() throws ApiException {
        MergeSettings settings = new MergeSettings().deliveryFormat(MergeSettings.DeliveryFormatEnum.ZIP).fileFormat(MergeSettings.FileFormatEnum.DOCX);
        Job response = API.submitMergeJob(job.getJobId(), settings);
        job = Job.StateEnum.PROCESSING == response.getState() ? assertJob(response, Job.StateEnum.PROCESSING) : assertJob(response, Job.StateEnum.DONE);
    }
*/

    /**
     * Get a job manually
     * <p>
     * Get a job manually with all its stored objects
     *
     * @throws ApiException if the Api call fails
     */
    public void getJobAfterTestImpl() throws ApiException, InterruptedException {
        Job response = API.getJob(job.getJobId());
        int count = 0;
        while (count++ < 60 && Job.StateEnum.PROCESSING == response.getState()) {
            Thread.sleep(500);
            response = API.getJob(job.getJobId());
        }
        job = assertJob(response, Job.StateEnum.DONE);
    }


    /**
     * Get a job
     * <p>
     * Get a job
     *
     * @throws ApiException if the Api call fails
     */
    protected void getResultFileStreamTestImpl() throws ApiException {
        byte[] bytes = API.getStream(job.getJobId());
        Assert.assertNotNull(bytes);
        // TODO: Check for proper zip file. Wait for issue SPMS-128 since we should return a stream on the SDK
    }


    /**
     * Delete the job
     *
     * @throws ApiException if the Api call fails
     */
    @AfterClass
    public static void cleanup() throws ApiException {
        if (job != null) {
            API.deleteJob(job.getJobId());
        }
    }


    protected Job assertJob(Job response, Job.StateEnum state) {
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getJobId());
        Assert.assertEquals(job.getJobId(), response.getJobId());
        Assert.assertEquals(state, response.getState());
        Assert.assertNotNull(response.getInputs());
        Assert.assertEquals(1, response.getInputs().size());
        return job;
    }


}

/**
 * Split Merger
 * The Split and Merge API allows you to split and merge files. For now you always have to define the filetype for the split or merge result. Supported types are Tiff, PDF or MS word files. In the future new types as well as type inferring will be implemented. Please note that this API will change in the way the merge or split is initiated from v0.1 to v0.2 which is scheduled later in 2017.
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKSplitMerge/ApiClient', 'SphereonSDKSplitMerge/model/ActionSettings', 'SphereonSDKSplitMerge/model/BackendSettings', 'SphereonSDKSplitMerge/model/Error', 'SphereonSDKSplitMerge/model/ErrorResponse', 'SphereonSDKSplitMerge/model/FileEntry', 'SphereonSDKSplitMerge/model/Job', 'SphereonSDKSplitMerge/model/JobSettings', 'SphereonSDKSplitMerge/model/Lifecycle', 'SphereonSDKSplitMerge/model/MergeSettings', 'SphereonSDKSplitMerge/model/SplitSettings', 'SphereonSDKSplitMerge/api/AllApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ActionSettings'), require('./model/BackendSettings'), require('./model/Error'), require('./model/ErrorResponse'), require('./model/FileEntry'), require('./model/Job'), require('./model/JobSettings'), require('./model/Lifecycle'), require('./model/MergeSettings'), require('./model/SplitSettings'), require('./api/AllApi'));
  }
}(function(ApiClient, ActionSettings, BackendSettings, Error, ErrorResponse, FileEntry, Job, JobSettings, Lifecycle, MergeSettings, SplitSettings, AllApi) {
  'use strict';

  /**
   * The_Split_and_Merge_API_allows_you_to_split_and_merge_files__For_now_you_always_have_to_define_the_filetype_for_the_split_or_merge_result__Supported_types_are_Tiff_PDF_or_MS_word_files__In_the_future_new_types_as_well_as_type_inferring_will_be_implemented__Please_note_that_this_API_will_change_in_the_way_the_merge_or_split_is_initiated_from_v0_1_to_v0_2_which_is_scheduled_later_in_2017_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SplitMerger = require('SphereonSDKSplitMerge/index'); // See note below*.
   * var xxxSvc = new SplitMerger.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SplitMerger.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['SphereonSDKSplitMerge/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SplitMerger.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SplitMerger.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module SphereonSDKSplitMerge/index
   * @version 0.1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:SphereonSDKSplitMerge/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ActionSettings model constructor.
     * @property {module:SphereonSDKSplitMerge/model/ActionSettings}
     */
    ActionSettings: ActionSettings,
    /**
     * The BackendSettings model constructor.
     * @property {module:SphereonSDKSplitMerge/model/BackendSettings}
     */
    BackendSettings: BackendSettings,
    /**
     * The Error model constructor.
     * @property {module:SphereonSDKSplitMerge/model/Error}
     */
    Error: Error,
    /**
     * The ErrorResponse model constructor.
     * @property {module:SphereonSDKSplitMerge/model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The FileEntry model constructor.
     * @property {module:SphereonSDKSplitMerge/model/FileEntry}
     */
    FileEntry: FileEntry,
    /**
     * The Job model constructor.
     * @property {module:SphereonSDKSplitMerge/model/Job}
     */
    Job: Job,
    /**
     * The JobSettings model constructor.
     * @property {module:SphereonSDKSplitMerge/model/JobSettings}
     */
    JobSettings: JobSettings,
    /**
     * The Lifecycle model constructor.
     * @property {module:SphereonSDKSplitMerge/model/Lifecycle}
     */
    Lifecycle: Lifecycle,
    /**
     * The MergeSettings model constructor.
     * @property {module:SphereonSDKSplitMerge/model/MergeSettings}
     */
    MergeSettings: MergeSettings,
    /**
     * The SplitSettings model constructor.
     * @property {module:SphereonSDKSplitMerge/model/SplitSettings}
     */
    SplitSettings: SplitSettings,
    /**
     * The AllApi service constructor.
     * @property {module:SphereonSDKSplitMerge/api/AllApi}
     */
    AllApi: AllApi
  };

  return exports;
}));
